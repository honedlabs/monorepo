<?php

declare(strict_types=1);

namespace Honed\Binding;

use Illuminate\Container\Container;
use Illuminate\Contracts\Foundation\Application;
use Illuminate\Support\Str;
use Throwable;

/**
 * @template TModel of \Illuminate\Database\Eloquent\Model
 */
abstract class Binder
{
    /**
     * The default namespace where binders reside.
     *
     * @var string
     */
    public static $namespace = 'App\\Binders\\';

    /**
     * The name of the binder's corresponding model.
     *
     * @var class-string<TModel>
     */
    protected $model;

    /**
     * The default model name resolvers.
     *
     * @var array<class-string, callable(self): class-string<TModel>>
     */
    protected static $modelNameResolvers = [];

    /**
     * The binder name resolver.
     *
     * @var callable(class-string<\Illuminate\Database\Eloquent\Model>): class-string<Binder>
     */
    protected static $binderNameResolver;

    /**
     * Retrieve the binder for the model which binds the given field if it exists.
     * 
     * @param class-string<TModel> $model
     * @param string|null $field
     * @return static|null
     */
    public static function for($model, $field)
    {
        //
    }

    /**
     * Resolve the binding for the model.
     * 
     * @param \Illuminate\Database\Eloquent\Model|\Illuminate\Contracts\Database\Eloquent\Builder|\Illuminate\Database\Eloquent\Relations\Relation $query
     * @param string $field
     * @param mixed $value
     * @return \Illuminate\Contracts\Database\Eloquent\Builder
     */
    public function resolve($query, $field, $value)
    {
        return $this->{$field}($query, $value);
    }

    /**
     * Specify the callback that should be invoked to guess model names based on binder names.
     *
     * @param  callable(self): class-string<TModel>  $callback
     * @return void
     */
    public static function guessModelNamesUsing(callable $callback)
    {
        static::$modelNameResolvers[static::class] = $callback;
    }

    /**
     * Specify the default namespace that contains the application's model binders.
     *
     * @return void
     */
    public static function useNamespace(string $namespace)
    {
        static::$namespace = $namespace;
    }

    /**
     * Specify the callback that should be invoked to guess binder names based on dynamic relationship names.
     *
     * @param  callable(class-string<\Illuminate\Database\Eloquent\Model>): class-string<Binder>  $callback
     * @return void
     */
    public static function guessBinderNamesUsing(callable $callback)
    {
        static::$binderNameResolver = $callback;
    }

    /**
     * Flush the binder's global state.
     *
     * @return void
     */
    public static function flushState()
    {
        static::$modelNameResolvers = [];
        static::$binderNameResolver = null;
        static::$namespace = 'App\\Binders\\';
    }

    /**
     * Get the name of the model that is generated by the binder.
     *
     * @return class-string<TModel>
     */
    public function modelName()
    {
        if (isset($this->model)) {
            return $this->model;
        }

        $resolver = static::$modelNameResolvers[static::class] ?? static::$modelNameResolvers[self::class] ?? static::$modelNameResolver ?? function (self $binder) {
            $namespacedBinderBasename = Str::replaceLast(
                'Binder', '', Str::replaceFirst(static::$namespace, '', $binder::class)
            );

            $binderBasename = Str::replaceLast('Binder', '', class_basename($binder));

            $appNamespace = static::appNamespace();

            return class_exists($appNamespace.'Models\\'.$namespacedBinderBasename)
                ? $appNamespace.'Models\\'.$namespacedBinderBasename
                : $appNamespace.$binderBasename;
        };

        return $resolver($this);
    }

    /**
     * Get the application namespace for the application.
     *
     * @return string
     */
    protected static function appNamespace()
    {
        try {
            return Container::getInstance()
                ->make(Application::class)
                ->getNamespace();
        } catch (Throwable) {
            return 'App\\';
        }
    }
}
